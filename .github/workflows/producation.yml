name: Production CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: mardinlimunir
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_IMAGE_NAME: mardinlimunir/${{ github.event.repository.name }}
  GITGUARDIAN_API: ${{ secrets.GITGUARDIAN_API_KEY }}
  CODESANDBOX_TOKEN: ${{ secrets.CODESANDBOX_TOKEN }}

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      node_modules_cache: ${{ steps.set-cache-output.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Set cache output
        id: set-cache-output
        run: echo "cache-hit=$(ls node_modules | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT
  eslint:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run eslint tool
        run: npx eslint '.' --fix
  prettier:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run prettier tool
        run: npx prettier --write . --check
  typecheck:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run typecheck tool
        run: npx tsc --noEmit
  build-prod:
    needs:
      - eslint
      - prettier
      - typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build application
        run: |
          npx tsc
  deploy-docs:
    needs: build-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Generate TypeDoc
        run: npx typedoc
        working-directory: ${{ github.workspace }}
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
  git_guardian-prod:
    name: GitGuardian scan
    needs: build-prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@v1.41.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ env.GITGUARDIAN_API }}
  trivy-scans-prod:
    runs-on: ubuntu-latest
    needs: build-prod
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: npm
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build application for Trivy
        run: |
          npx tsc
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.3
        with:
          version: "v0.64.1"
      - name: Update Trivy DB
        run: trivy image --download-db-only
      - name: Scan npm vulnerabilities
        run: |
          trivy fs --scanners vuln \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          --format table \
          --exit-code 1 \
          --dependency-tree \
          package-lock.json
      - name: Scan Dockerfile
        run: |
          trivy config .docker/Dockerfile \
          --severity HIGH,CRITICAL \
          --format table \
          --exit-code 1
      - name: Build Docker image
        run: docker build -f .docker/Dockerfile -t homelab-cli .
      - name: Scan Docker image
        run: |
          trivy image homelab-cli \
          --scanners vuln \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          --format table \
          --exit-code 1
  check-audit-prod:
    needs: build-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        working-directory: ${{ github.workspace }}
  deploy-codesandbox-prod:
    needs: build-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install CodeSandbox CLI
        run: npm install -g codesandbox
      - name: Deploy to CodeSandbox
        run: |
          # Create a temporary directory for deployment
          mkdir -p ./deploy

          # Copy only necessary files for production
          cp -r dist package.json package-lock.json ./deploy/

          # Navigate to the deployment directory
          cd ./deploy

          # Deploy to CodeSandbox
          echo "Deploying to CodeSandbox..."
          csb deploy --token ${{ env.CODESANDBOX_TOKEN }} --name ${{ github.event.repository.name }}

          # Clean up
          cd ..
          rm -rf ./deploy
        env:
          CODESANDBOX_TOKEN: ${{ env.CODESANDBOX_TOKEN }}
  docker-prod:
    needs:
      - trivy-scans-prod
      - git_guardian-prod
      - deploy-docs
      - check-audit-prod
      - deploy-codesandbox-prod
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build application
        run: |
          npx tsc
      - name: Prune production dependencies
        run: npm prune --production
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: Push Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKER_IMAGE_NAME }}
          readme-filepath: ./README.md
          short-description: |
            ${{ github.event.repository.description }}
            Category: ${{ github.event.repository.topics }}
      - name: Extract metadata for Docker Hub
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
          flavor: |
            latest=true
      - name: Build and push Docker image to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            BRANCH=${{ github.ref_name }}
            BUILD_TIMESTAMP=${{ github.event.repository.updated_at }}
            GITHUB_REPO=${{ github.repository }}
            IMAGE_TITLE=${{ github.event.repository.name }}
            GITHUB_OWNER=${{ github.repository_owner }}
            GITHUB_REF_NAME=${{ github.ref_name }}
            IMAGE_DESCRIPTION=${{ github.event.repository.description }}
            GITHUB_SHA=${{ github.sha }}
            REPO_LICENSE=${{ github.event.repository.license }}
            REPO_CATEGORIES=${{ github.event.repository.topics }}
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
