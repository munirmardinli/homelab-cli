name: Production CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NPM_VERSION: "22"
  REGISTRY_URL: "https://npm.pkg.github.com"
  PYTHON_VERSION: "3.13"
  TRIVY_VERSION: "0.64.1"
  DEPLOYMENT_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
  REPO_NAME: ${{ github.event.repository.name }}
  IMAGE_TAG: latest
  DOCKER_IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  DOCKER_REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write
  actions: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      node_modules_cache: ${{ steps.set-cache-output.outputs.cache-hit }}
      package_version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
      - name: Get package version
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NPM_VERSION }}
          cache: npm
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm install
      - name: Set cache output
        id: set-cache-output
        run: echo "cache-hit=$(ls node_modules | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT
  biome-check:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run Biome check
        run: npx @biomejs/biome check --write
  biome-format:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run Biome format
        run: npx @biomejs/biome format --write
  biome-lint:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run Biome lint
        run: npx @biomejs/biome lint --write
  typecheck:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run typecheck tool
        run: npx tsc --noEmit
  build-prod:
    needs:
      - biome-check
      - biome-format
      - biome-lint
      - typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build application
        run: npx tsc
  trivy-scans-prod:
    runs-on: ubuntu-latest
    needs: build-prod
    steps:
      - uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NPM_VERSION }}
          cache: npm
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build application for Trivy
        run: |
          npx tsc
          echo "AVD-DS-0002" >> .trivyignore
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.4
        with:
          version: v${{ env.TRIVY_VERSION }}
      - name: Update Trivy DB
        run: trivy image --download-db-only
      - name: Scan npm vulnerabilities
        run: |
          trivy fs --scanners vuln \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          --format table \
          --exit-code 1 \
          --dependency-tree \
          package-lock.json
      - name: Scan Dockerfile
        run: |
          trivy config .github/.docker/Dockerfile \
          --severity HIGH,CRITICAL \
          --format table \
          --exit-code 1
      - name: Build Docker image
        run: docker build -f .github/.docker/Dockerfile -t homelab-cli .
      - name: Scan Docker image
        run: |
          trivy image homelab-cli \
          --scanners vuln \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          --format table \
          --exit-code 1

  docker-prod:
    needs: build-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build application
        run: npx tsc
      - name: Prune Dependencies
        run: npm prune --production
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .github/.docker/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            BRANCH=${{ github.ref_name }}
            BUILD_TIMESTAMP=${{ github.event.repository.updated_at }}
            GITHUB_REPO=${{ github.repository }}
            IMAGE_TITLE=${{ github.event.repository.name }}
            GITHUB_OWNER=${{ github.repository_owner }}
            GITHUB_REF_NAME=${{ github.ref_name }}
            IMAGE_DESCRIPTION=${{ github.event.repository.description }}
            GITHUB_SHA=${{ github.sha }}
            REPO_LICENSE=${{ github.event.repository.license }}

  publish-package:
    needs:
      - trivy-scans-prod
      - docker-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NPM_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build application
        run: npx tsc
      - name: Verify package version
        run: |
          echo "Package version from package.json: $(node -p "require('./package.json').version")"
          echo "Package name: $(node -p "require('./package.json').name")"
      - name: Publish package to GitHub Packages
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
