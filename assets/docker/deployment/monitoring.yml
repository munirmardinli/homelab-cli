---
x-logging: &default-logging
  driver: "loki"
  options: &default-logging-options
    loki-url: https://loki.${SYNOLOGY_BASIC_URL:?SYNOLOGY_BASIC_URL required}/loki/api/v1/push
    loki-retries: 5
    loki-batch-size: 400
    loki-batch-wait: 2s
    loki-timeout: 10s
    loki-max-backoff: 5s
    loki-min-backoff: 1s
    loki-tenant-id: default

x-labels: &default-labels
  com.centurylinklabs.watchtower.enable: true
  recreat.container: true
  container.label.group: observability

x-limits: &resource-limits
  mem_limit: "256m"
  mem_reservation: "64m"
  cpu_shares: "512"
  restart: always

services:
  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus:latest
    user: root
    <<: *resource-limits
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/ || exit 1
    command:
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--log.level=warn"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--storage.tsdb.wal-compression"
      - "--web.enable-lifecycle"
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=prometheus
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: host
    expose:
      - 9090
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT:?path required}/compose/grafana/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/grafana/rules
        target: /etc/prometheus/rules
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/prometheus/prometheus/data
        target: /prometheus
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/dashboard/assets/generated
        target: /etc/prometheus/secret
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      dockerization:
    labels:
      <<: *default-labels
      monitoring: prometheus
    links: [cadvisor, node-exporter]

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    hostname: grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=grafana
    ports:
      - target: 3000
        published: 9091
        protocol: tcp
        mode: host
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
      GF_SERVER_DOMAIN: grafana.${SYNOLOGY_BASIC_URL}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:?GF Security Admin Password required}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,natel-discrete-panel,grafana-piechart-panel,grafana-lokiexplore-app
      GF_SERVER_ROOT_URL: "https://grafana.${SYNOLOGY_BASIC_URL}"
      GF_SERVER_SERVE_FROM_SUB_PATH: false
      #GF_AUTH_GENERIC_OAUTH_ENABLED: true
      #GF_AUTH_GENERIC_OAUTH_NAME: "authentik"
      #GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: true
      #GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${GF_AUTH_GENERIC_OAUTH_CLIENT_ID:?Client-ID required}
      #GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:?OAuth Client Secret required}
      #GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
      #GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://authentik.${SYNOLOGY_BASIC_URL}/application/o/authorize/"
      #GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://authentik.${SYNOLOGY_BASIC_URL}/application/o/token/"
      #GF_AUTH_GENERIC_OAUTH_API_URL: "https://authentik.${SYNOLOGY_BASIC_URL}/application/o/userinfo/"
      #GF_AUTH_SIGNOUT_REDIRECT_URL: "https://authentik.${SYNOLOGY_BASIC_URL}/application/o/grafana/end-session/"
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/prometheus/grafana
        target: /var/lib/grafana
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/grafana/datasources.yaml
        target: /etc/grafana/provisioning/datasources/datasources.yaml
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    depends_on: [prometheus,loki]
    networks:
      dockerization:
    labels:
      <<: *default-labels
      monitoring: grafana

  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox-exporter
    hostname: blackbox-exporter
    command: "--config.file=/etc/blackbox/blackbox.yml"
    <<: *resource-limits
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9115/",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=blackbox-exporter
    ports:
      - target: 9115
        published: 9115
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/grafana/blackbox.yml
        target: /etc/blackbox/blackbox.yml
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    networks:
      dockerization:
    labels:
      <<: *default-labels
      monitoring: blackbox-exporter

  loki:
    container_name: loki
    image: grafana/loki:3.2.1
    hostname: loki
    user: root
    <<: *resource-limits
    command: -config.file=/etc/loki/loki.yml
    ports:
      - target: 3100
        published: 3100
        protocol: tcp
        mode: host
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/grafana/loki.yml
        target: /etc/loki/loki.yml
        read_only: true
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/prometheus/loki
        target: /loki
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    networks:
      dockerization:
    labels:
      <<: *default-labels
      monitoring: loki

  promtail:
    container_name: promtail
    image: grafana/promtail:2.9.0
    hostname: promtail
    <<: *resource-limits
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/logs/promtail
        target: /var/log
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/grafana
        target: /etc/promtail
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      dockerization:
    depends_on: [loki]
    links: [loki]
    labels:
      <<: *default-labels
      monitoring: promtail

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    hostname: node-exporter
    <<: *resource-limits
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=node-exporter
    ports:
      - target: 9100
        published: 9100
        protocol: tcp
        mode: host
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
        read_only: true
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    command:
      - --collector.disable-defaults
      - --collector.stat
      - --collector.time
      - --collector.cpu
      - --collector.loadavg
      - --collector.hwmon
      - --collector.meminfo
      - --collector.diskstats
    labels:
      <<: *default-labels
      monitoring: node-exporter
    networks:
      dockerization:

  alertmanager:
    container_name: alertmanager
    hostname: alertmanager
    image: prom/alertmanager:latest
    <<: *resource-limits
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=alertmanager
    ports:
      - target: 9093
        published: 9093
        protocol: tcp
        mode: host
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/grafana/alertmanager.yml
        target: /etc/alertmanager/alertmanager.yml
        read_only: true
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/grafana/datasources.yaml
        target: /etc/grafana/provisioning/datasources/datasources.yaml
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    networks:
      dockerization:
    labels:
      <<: *default-labels
      monitoring: alertmanager

  snmp:
    container_name: snmp
    image: prom/snmp-exporter:latest
    hostname: snmp
    <<: *resource-limits
    security_opt:
      - no-new-privileges:true
    read_only: true
    user: 1026:100
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=snmp
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9116/ || exit 1
    command:
      - "--config.file=/etc/snmp_exporter/snmp.yml"
    ports:
      - target: 9116
        published: 9116
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/grafana/snmp.yml
        target: /etc/snmp_exporter/snmp.yml
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    networks:
      dockerization:
    labels:
      <<: *default-labels
      monitoring: snmp

  fritzbox-exporter:
    image: pdreker/fritz_exporter:2
    container_name: fritzbox-exporter
    hostname: fritzbox-exporter
    read_only: true
    <<: *resource-limits
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=fritzbox-exporter
    environment:
      FRITZ_HOSTNAME: ${FRITZ_HOSTNAME:?Hostname is Missing}
      FRITZ_USERNAME: ${FRITZ_USERNAME:?Username is Missing}
      FRITZ_PASSWORD: ${FRITZ_PASSWORD:?Password is Missing}
    ports:
      - target: 9787
        published: 9787
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    labels:
      <<: *default-labels
      monitoring: fritz-exporter
    networks:
      dockerization:

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    hostname: cadvisor
    read_only: true
    command:
      - "--docker_only=true"
    security_opt:
      - no-new-privileges=true
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=cadvisor
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
        read_only: true
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /volume1/@docker/
        target: /var/lib/docker
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    networks:
      dockerization:
    labels:
      <<: *default-labels
      monitoring: cadvisor

  eclipse-mosquitto:
    image: eclipse-mosquitto:latest
    container_name: eclipse-mosquitto
    hostname: eclipse-mosquitto
    <<: *resource-limits
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=eclipse-mosquitto
    ports:
      - target: 1883
        published: 1883
        protocol: tcp
        mode: host
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    environment:
      TZ: ${TZ:-Europe/Berlin}
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/config
        target: /mosquitto/config
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/prometheus/mosquitto/data
        target: /mosquitto/data
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/logs/mosquitto
        target: /mosquitto/log
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    labels:
      <<: *default-labels
      monitoring: eclipse-mosquitto
    networks:
      dockerization:

  influxdb:
    image: influxdb:2.7
    hostname: influxdb
    container_name: influxdb
    stdin_open: true
    tty: true
    <<: *resource-limits
    mem_limit: "1g"
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=influxdb
    ports:
      - target: 8086
        published: 8086
        protocol: tcp
        mode: host
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD:?InfluxDB Admin Password required}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-monitoring}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-prometheus}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN:?InfluxDB Admin Token required}
      DOCKER_INFLUXDB_INIT_RETENTION: ${INFLUXDB_RETENTION:-30d}
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/prometheus/influxdb/data
        target: /var/lib/influxdb2
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/prometheus/influxdb/config
        target: /etc/influxdb2
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/logs/influxdb
        target: /var/log
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    labels:
      <<: *default-labels
      monitoring: influxdb
    networks:
      dockerization:

  telegraf:
    image: telegraf:latest
    hostname: telegraf
    container_name: telegraf
    logging:
      <<: *default-logging
      options:
        <<: *default-logging-options
        loki-external-labels: job=telegraf
    environment:
      TZ: ${TZ:-Europe/Berlin}
      UID: ${UID_NAS_ADMIN:-1026}
      GID: ${GID_NAS_ADMIN:-100}
      INFLUX_TOKEN: ${INFLUX_TOKEN:?InfluxDB Token required}
    volumes:
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/compose/config/telegraf.conf
        target: /etc/telegraf/telegraf.conf
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/logs/telegraf
        target: /etc/telegraf/logs
      - type: bind
        source: ${MOUNT_PATH_DOCKER_ROOT}/prometheus/telegraf
        target: /etc/telegraf/telegraf.d
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
    networks:
      dockerization:
    depends_on: [influxdb]
    labels:
      <<: *default-labels
      monitoring: telegraf

networks:
  dockerization:
    external: true
